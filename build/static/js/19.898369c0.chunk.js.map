{"version":3,"sources":["config.js","../node_modules/react-bootstrap/esm/Spinner.js","views/plans/render/components/ModalFilter.jsx","views/plans/render/btn/BtnFilter.jsx","views/plans/render/GraphicPlan.jsx","views/plans/render/btn/BtnAttValues.jsx","views/plans/render/Scratchs.jsx","views/plans/render/btn/BtnAddPlan.jsx","views/plans/render/imput/ImputSearch.jsx","views/plans/render/btn/BtnEditPlan.jsx","views/plans/render/components/ActiveAndInactivePlan.jsx","views/plans/render/AddPlans.jsx","views/plans/Plans.jsx"],"names":["token","Cookies","get","configCookies","headers","Authorization","urlDomain","Spinner","React","ref","bsPrefix","variant","animation","size","as","Component","className","props","useBootstrapPrefix","bsSpinnerPrefix","_jsx","classNames","displayName","ModalFilter","filter","setFilter","saveFilter","useState","valueFilterStartDate1","setValueFilterStartDate1","valueFilterFinalDate1","setValueFilterFinalDate1","valueFilterStartDate2","setValueFilterStartDate2","valueFilterFinalDate2","setValueFilterFinalDate2","useEffect","visible","onClose","alignment","xs","onChange","target","value","type","color","onClick","BtnFilter","caret","icon","cilOptions","GraphicPlan","random","min","max","Math","floor","data","labels","datasets","label","backgroundColor","borderColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","position","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","line","point","radius","hitRadius","hoverRadius","hoverBorderWidth","BtnAttValues","Scratchs","dados","setDados","axios","then","response","catch","r","length","striped","hover","scope","map","item","index","to","until","krisk","exposition","toString","BtnAddPlan","savePlan","setVisible","customize","setCustomize","fixed","setFixed","finalKmValue","setFinalKmValue","namePlan","setNamePlan","coberturas","name","cusFixed","valueKm","cobertura","push","htmlFor","id","placeholder","toFixed","replace","disabled","cols","key","zero","sign","toppingsFixed","c","toppingsCustomize","sort","a","b","removeFixedCovers","checked","toppings","addFixedCoverage","ImputSearch","BtnEditPlan","sum","ActiveAndInactivePlan","op1","setOp1","op2","setOp2","readOnly","multiple","AddPlans","Plans"],"mappings":"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","file":"static/js/19.898369c0.chunk.js","sourcesContent":["import Cookies from \"js-cookie\";\n\n// Endereço padrão das API\n\nconst prod = 'http://dashboardbff.oonpayperuse.com.br'\nconst dev =  'http://localhost:8080'\n\nconst tokenMaps = 'AIzaSyB9I7snvZRRQ6faupULeBXYz5tU2AUuWek'   // TOKEN PESSOAL \nconst urlDomain = prod\n\nconst token = Cookies.get(\"TokenID\");\n\nexport const configCookies = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json;charset=UTF-8\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  },\n};\n\n\nexport default  urlDomain","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Spinner = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  variant,\n  animation,\n  size,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  const bsSpinnerPrefix = `${bsPrefix}-${animation}`;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsSpinnerPrefix, size && `${bsSpinnerPrefix}-${size}`, variant && `text-${variant}`)\n  });\n});\nSpinner.displayName = 'Spinner';\nexport default  Spinner;","import React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CFormInput, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react';\n\nimport '../../css/modalFilter.css'\n\nfunction ModalFilter({ filter, setFilter, saveFilter }) {\n    const [valueFilterStartDate1, setValueFilterStartDate1] = useState('');\n    const [valueFilterFinalDate1, setValueFilterFinalDate1] = useState('');\n    const [valueFilterStartDate2, setValueFilterStartDate2] = useState('');\n    const [valueFilterFinalDate2, setValueFilterFinalDate2] = useState('');\n\n    useEffect(() => {\n        return () => {\n            setValueFilterStartDate1('')\n            setValueFilterFinalDate1('')\n            setValueFilterStartDate2('')\n            setValueFilterFinalDate2('')\n        }\n    }, [])\n\n    return (\n        <CModal\n            visible={filter}\n            onClose={() => setFilter(false)}\n            size=\"lg\"\n            alignment=\"center\"\n        >\n            <CModalHeader>\n                <CModalTitle>Filtrar</CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n                <CRow>\n                    <div className=\"title-filter\">\n                        Escolha o intervalo de tempo - Linha 1\n                    </div>\n                    <CCol xs={3}>\n                        <h6>Data de início</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterStartDate1(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                    <CCol xs={3}>\n                        <h6>Data de fim</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterFinalDate1(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                </CRow>\n                <CRow>\n                    <div className=\"title-filter mt-4\">\n                        Escolha o intervalo de tempo - Linha 2\n                    </div>\n                    <CCol xs={3}>\n                        <h6>Data de início</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterStartDate2(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                    <CCol xs={3}>\n                        <h6>Data de fim</h6>\n                        <div className=\"d-flex\">\n                            <CFormInput\n                                onChange={({ target }) => setValueFilterFinalDate2(target.value)}\n                                className=\"me-2\"\n                                type=\"date\"\n                            />\n                        </div>\n                    </CCol>\n                </CRow>\n            </CModalBody>\n            <CModalFooter>\n                <CButton color=\"secondary\" onClick={() => setFilter(false)}>\n                    Cancelar\n                </CButton>\n                <CButton\n                    onClick={() => saveFilter(\n                        valueFilterStartDate1,\n                        valueFilterFinalDate1,\n                        valueFilterStartDate2,\n                        valueFilterFinalDate2,\n                    )}\n                    color=\"primary\" >\n                    Salvar\n                </CButton>\n            </CModalFooter>\n        </CModal>\n    )\n}\n\nexport default  ModalFilter;\n","import React, { useState } from 'react';\nimport { cilOptions } from '@coreui/icons';\nimport CIcon from '@coreui/icons-react';\nimport { CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle } from '@coreui/react';\nimport ModalFilter from '../components/ModalFilter';\n\nfunction BtnFilter({ saveFilter }) {\n    const [filter, setFilter] = useState(false);\n    const [report, setReport] = useState(false);\n\n    return (\n        <>\n            <CDropdown>\n                <CDropdownToggle\n                    caret={false}\n                    variant='ghost'\n                    color=\"link\"\n                    className=\"p-0\"\n                >\n                    <CIcon icon={cilOptions} size=\"lg\" />\n                </CDropdownToggle>\n                <CDropdownMenu>\n                    <CDropdownItem onClick={() => setFilter(true)}>Filtrar...</CDropdownItem>\n                    <CDropdownItem>Gerar relatório...</CDropdownItem>\n                    <CDropdownItem>Fazer download...</CDropdownItem>\n                </CDropdownMenu>\n            </CDropdown>\n\n            <ModalFilter filter={filter} setFilter={setFilter} saveFilter={saveFilter} />\n        </>\n    )\n}\n\nexport default  BtnFilter","import React from 'react';\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react';\nimport { CChart } from '@coreui/react-chartjs';\n\nimport BtnFilter from './btn/BtnFilter';\n\nimport '../css/graphicPlan.css';\n\nfunction GraphicPlan() {\n    const random = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"plan-title\">Planos ativos</label >\n                        <br />\n                        <label className=\"plan-sub\">Dezembro 2022</label>\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <BtnFilter />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"line\"\n                    data={{\n                        labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 5'],\n                        datasets: [\n                            {\n                                label: 'Atendimentos abertos',\n                                backgroundColor: '#216CFF',\n                                borderColor: \"#216CFF\",\n                                pointBorderColor: \"#fff\",\n                                data: [\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n                            {\n                                label: 'Atendimentos encerrados',\n                                backgroundColor: '#00F781',\n                                borderColor: \"#00F781\",\n                                pointBorderColor: \"#fff\",\n                                data: [\n                                    random(50, 250),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n\n                        ],\n                    }}\n                    options={{\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                display: true,\n                            },\n                        },\n                        scales: {\n                            x: {\n                                grid: {\n                                    drawOnChartArea: false,\n                                },\n                            },\n                            y: {\n                                ticks: {\n                                    beginAtZero: true,\n                                    maxTicksLimit: 5,\n                                    stepSize: Math.ceil(250 / 5),\n                                    max: 250,\n                                },\n                            },\n                        },\n                        elements: {\n                            line: {\n                                // tension: 0.2,\n                            },\n                            point: {\n                                radius: 0,\n                                hitRadius: 10,\n                                hoverRadius: 4,\n                                hoverBorderWidth: 3,\n                            },\n                        },\n                    }}\n                    className=\"chart-line\"\n                />\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  GraphicPlan;\n","import React from 'react';\nimport { CButton } from '@coreui/react';\n\nfunction BtnAttValues() {\n  return (\n    <CButton>\n        Atualizar valores\n    </CButton>\n  )\n}\n\nexport default  BtnAttValues","import React, { useEffect, useState } from 'react'\nimport { CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow, CCard, CCardBody, CRow, CCol } from '@coreui/react'\nimport axios from 'axios'\nimport { Spinner } from 'react-bootstrap'\n\nimport BtnAttValues from './btn/BtnAttValues'\nimport urlDomain, { configCookies } from 'src/config'\n\nimport '../css/scratchs.css'\n\nfunction Scratchs() {\n    const [dados, setDados] = useState([]);\n\n    useEffect(() => {\n        axios\n            .get(`${urlDomain}/risks`, configCookies)\n            .then((response) => {\n                setDados(response.data)\n            })\n            .catch(r => {\n                //console.log('error', r), alert('Login expirados'),window.location.reload()\n            })\n    }, [])\n\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"plan-title\">Riscos</label >\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <BtnAttValues />\n                    </CCol>\n                </CRow>\n                <br />\n                {dados.length == 0 ?\n                    <>\n                        <h4> <Spinner animation=\"grow\" variant=\"info\" /></h4>\n                        <br />\n                    </> :\n                    <div className=\"table-overflow\">\n                        <CTable striped hover>\n                            <CTableHead>\n                                <CTableRow>\n                                    <CTableHeaderCell scope=\"col\">Valor mínimo do veículo</CTableHeaderCell>\n                                    <CTableHeaderCell scope=\"col\">Valor máximo do veículo</CTableHeaderCell>\n                                    <CTableHeaderCell scope=\"col\">Constante de risco</CTableHeaderCell>\n                                    <CTableHeaderCell scope=\"col\">Variável de exposição</CTableHeaderCell>\n                                </CTableRow>\n                            </CTableHead>\n                            <CTableBody >\n                                {dados.map((item, index) => {\n                                    return (\n                                        <CTableRow key={index.toString()}>\n                                            <CTableDataCell className=\"valorMin\">\n                                                <p> R$ {item.to} </p>\n                                            </CTableDataCell>\n\n                                            <CTableDataCell color='secondary' className=\"text-center\">\n                                                <p> R$ {item.until} </p>\n                                            </CTableDataCell>\n\n                                            <CTableDataCell className=\"text-center\">\n                                                <p> {item.krisk} </p>\n                                            </CTableDataCell>\n\n                                            <CTableDataCell color='secondary' className=\"text-center\">\n                                                <p> {item.exposition} </p>\n                                            </CTableDataCell>\n                                        </CTableRow>\n                                    )\n                                })}\n                            </CTableBody>\n                        </CTable>\n                    </div>\n                }\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  Scratchs","import React, { useEffect, useState } from 'react'\nimport { CButton, CCol, CForm, CFormCheck, CFormInput, CFormLabel, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react'\n\nfunction BtnAddPlan({ savePlan }) {\n    const [visible, setVisible] = useState(false);\n    const [customize, setCustomize] = useState([]);\n    const [fixed, setFixed] = useState([]);\n    const [finalKmValue, setFinalKmValue] = useState(0);\n    const [namePlan, setNamePlan] = useState('');\n\n    const coberturas = [\n        { name: 'Alagamentos', cusFixed: false, valueKm: 0.02 },\n        { name: 'Assistência 24h', cusFixed: false, valueKm: 0.01 },\n        { name: 'Chaveiro', cusFixed: false, valueKm: 0.01 },\n        { name: 'Colisão de danos parciais', cusFixed: false, valueKm: 0.03 },\n        { name: 'Colisão de perda total', cusFixed: false, valueKm: 0.01 },\n        { name: 'Incêndio', cusFixed: false, valueKm: 0.02 },\n        { name: 'Proteção de danos materiais', cusFixed: false, valueKm: 0.02 }\n    ]\n\n    useEffect(() => {\n        coberturas.map((cobertura) => {\n            customize.push(cobertura)\n        })\n    }, [])\n\n    const addFixedCoverage = (valueKm, name) => {\n        setFinalKmValue(finalKmValue + valueKm)\n        setFixed([...fixed, { name, cusFixed: false, valueKm }])\n        const toppings = customize.filter((c) => c.name != name);\n\n        const sort = [...toppings, { name, cusFixed: true }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n    }\n\n    const removeFixedCovers = (valueKm, name) => {\n        const zero = finalKmValue - valueKm;\n        Math.sign(zero) != -1 ? setFinalKmValue(zero)\n            : setFinalKmValue(0)\n        const toppingsFixed = fixed.filter((c) => c.name != name);\n\n        setFixed(toppingsFixed);\n\n        const toppingsCustomize = customize.filter((c) => c.name != name);\n\n        const sort = [...toppingsCustomize, { name, cusFixed: false, valueKm }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n\n    }\n\n    return (\n        <>\n            <CButton\n                onClick={() => setVisible(!visible)}\n            >\n                Adicionar plano\n            </CButton>\n            <CModal\n                alignment=\"center\"\n                size='xl'\n                visible={visible}\n                onClose={() => setVisible(false)}\n            >\n                <CModalHeader>\n                    <CModalTitle>Adicionar plano</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <CRow>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"name-plan\"\n                                >\n                                    Nome do plano\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"name-plan\"\n                                    type=\"text\"\n                                    placeholder=\"Plano principal\"\n                                    className='inputs-edit-plan'\n                                    onChange={({ target }) => setNamePlan(target.value)}\n                                />\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"value-km-plan\"\n                                >\n                                    Valor do km (R$)\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"value-km-plan\"\n                                    label=\"Valor do km (R$)\"\n                                    type=\"text\"\n                                    placeholder=\"R$ 0,06\"\n                                    className='inputs-edit-plan'\n                                    value={`R$ ${finalKmValue.toFixed(2).replace('.', ',')}`}\n                                    disabled\n                                />\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol className='mt-4'>\n                            <p>Selecione as coberturas fixas para o plano:</p>\n                            <p>COBERTURAS FIXAS</p>\n                            <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                {fixed ? fixed.map(({ name, valueKm }, key) => (\n                                    <CCol key={key} className='check-plan my-1 py-2'>\n                                        <CFormCheck\n                                            id={`${name}-fixed`}\n                                            value={name}\n                                            label={name}\n                                            onChange={() => removeFixedCovers(valueKm, name)}\n                                            checked\n                                        />\n                                    </CCol>\n                                )) : null}\n                            </CRow>\n                        </CCol>\n                        <CRow>\n                            <CCol className='mt-2'>\n                                <p>COBERTURAS CUSTOMIZÁVEIS</p>\n                                <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                    {customize ? customize.map(({ name, cusFixed, valueKm }, key) => (\n                                        <CCol key={key} className='check-plan my-1 py-2'>\n                                            <CFormCheck\n                                                id={`${name}-customize`}\n                                                label={name}\n                                                onChange={() => addFixedCoverage(valueKm, name)}\n                                                disabled={cusFixed}\n                                                checked={cusFixed}\n                                            />\n                                        </CCol>\n                                    )) : null}\n                                </CRow>\n                            </CCol>\n                        </CRow>\n                    </CRow>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setVisible(false)}\n                    >\n                        Cancelar\n                    </CButton>\n                    <CButton\n                        onClick={() => savePlan(\n                            namePlan,\n                            finalKmValue,\n                            customize,\n                            fixed,\n                        )}\n                        color=\"primary\"\n                    >\n                        Salvar\n                    </CButton>\n                </CModalFooter>\n            </CModal>\n        </>\n    )\n}\n\nexport default  BtnAddPlan;\n","import { CButton, CCol, CForm, CFormInput, CFormLabel } from '@coreui/react'\nimport React from 'react';\n\nimport BtnAddPlan from '../btn/BtnAddPlan'\n\nfunction ImputSearch({ savePlan }) {\n    return (\n        <CForm className=\"row g-3 justify-content-end\">\n            <CCol xs=\"auto d-flex\">\n                <CFormLabel htmlFor=\"inputPassword2\" className=\"visually-hidden\">\n                    Pesquisar\n                </CFormLabel>\n                <CFormInput type=\"password\" id=\"inputPassword2\" placeholder=\"Pesquisar\" />\n                <CButton type=\"button\" color=\"secondary\" className=\"mx-2\">\n                    Buscar\n                </CButton>\n            </CCol>\n            <CCol xs=\"auto\">\n                <BtnAddPlan />\n            </CCol>\n        </CForm>\n    )\n}\n\nexport default  ImputSearch","import React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CForm, CFormCheck, CFormInput, CFormLabel, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CRow } from '@coreui/react';\n\nimport '../../css/btnEditPlan.css'\n\nfunction BtnEditPlan({ savePlan }) {\n    const [visible, setVisible] = useState(false);\n    const [customize, setCustomize] = useState([]);\n    const [fixed, setFixed] = useState([]);\n    const [finalKmValue, setFinalKmValue] = useState(0);\n    const [namePlan, setNamePlan] = useState('');\n\n    const coberturas = [\n        { name: 'Alagamentos', cusFixed: false, valueKm: 0.02 },\n        { name: 'Assistência 24h', cusFixed: true, valueKm: 0.01 },\n        { name: 'Chaveiro', cusFixed: true, valueKm: 0.01 },\n        { name: 'Colisão de danos parciais', cusFixed: true, valueKm: 0.03 },\n        { name: 'Colisão de perda total', cusFixed: false, valueKm: 0.01 },\n        { name: 'Incêndio', cusFixed: false, valueKm: 0.02 },\n        { name: 'Proteção de danos materiais', cusFixed: false, valueKm: 0.02 }\n    ]\n\n    useEffect(() => {\n        let sum = 0;\n        coberturas.map((cobertura) => {\n            if (cobertura.cusFixed === true) {\n                fixed.push(cobertura)\n                sum = cobertura.valueKm + sum\n            }\n            customize.push(cobertura)\n        })\n        setFinalKmValue(sum);\n    }, [])\n\n    const addFixedCoverage = (valueKm, name) => {\n        setFinalKmValue(finalKmValue + valueKm)\n        setFixed([...fixed, { name, cusFixed: false, valueKm }])\n        const toppings = customize.filter((c) => c.name != name);\n\n        const sort = [...toppings, { name, cusFixed: true }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n    }\n\n    const removeFixedCovers = (valueKm, name) => {\n        const zero = finalKmValue - valueKm;\n        Math.sign(zero) != -1 ? setFinalKmValue(zero)\n            : setFinalKmValue(0)\n        const toppingsFixed = fixed.filter((c) => c.name != name);\n\n        setFixed(toppingsFixed);\n\n        const toppingsCustomize = customize.filter((c) => c.name != name);\n\n        const sort = [...toppingsCustomize, { name, cusFixed: false, valueKm }].sort(function (a, b) {\n            if (a.name > b.name) return 1;\n            if (a.name < b.name) return -1;\n            return 0;\n        });\n\n        setCustomize(sort)\n    }\n\n    return (\n        <>\n            <CButton\n                onClick={() => setVisible(!visible)}\n            >\n                Editar\n            </CButton>\n            <CModal\n                alignment=\"center\"\n                size='xl'\n                visible={visible}\n                onClose={() => setVisible(false)}\n            >\n                <CModalHeader>\n                    <CModalTitle>Editar Plano</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <CRow>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"name-plan\"\n                                >\n                                    Nome do plano\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"name-plan\"\n                                    type=\"text\"\n                                    placeholder=\"Plano principal\"\n                                    className='inputs-edit-plan'\n                                    onChange={({ target }) => setNamePlan(target.value)}\n                                />\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"value-km-plan\"\n                                >\n                                    Valor do km (R$)\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"value-km-plan\"\n                                    label=\"Valor do km (R$)\"\n                                    type=\"text\" placeholder=\"R$ 0,06\"\n                                    className='inputs-edit-plan'\n                                    value={`R$ ${finalKmValue.toFixed(2).replace('.', ',')}`}\n                                    disabled\n                                />\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <CRow>\n                        <CCol className='mt-4'>\n                            <p>Selecione as coberturas para o plano:</p>\n                            <p>COBERTURAS FIXAS</p>\n                            <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                {fixed ? fixed.map(({ name, valueKm }, key) => (\n                                    <CCol key={key} className='check-plan my-1 py-2'>\n                                        <CFormCheck\n                                            id={`${name}-fixed`}\n                                            value={name}\n                                            label={name}\n                                            onChange={() => removeFixedCovers(valueKm, name)}\n                                            checked\n                                        />\n                                    </CCol>\n                                )) : null}\n                            </CRow>\n                        </CCol>\n                        <CRow>\n                            <CCol className='mt-2'>\n                                <p>COBERTURAS CUSTOMIZÁVEIS</p>\n                                <CRow xs={{ cols: 4 }} className=\"p-2\">\n                                    {customize ? customize.map(({ name, cusFixed, valueKm }, key) => (\n                                        <CCol key={key} className='check-plan my-1 py-2'>\n                                            <CFormCheck\n                                                id={`${name}-customize`}\n                                                value={name}\n                                                label={name}\n                                                onChange={() => addFixedCoverage(valueKm, name)}\n                                                disabled={cusFixed}\n                                                checked={cusFixed}\n                                            />\n                                        </CCol>\n                                    )) : null}\n                                </CRow>\n                            </CCol>\n                        </CRow>\n                    </CRow>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton\n                        color=\"secondary\"\n                        onClick={() => setVisible(false)}\n                    >\n                        Cancelar\n                    </CButton>\n                    <CButton\n                        onClick={() => savePlan(\n                            namePlan,\n                            finalKmValue,\n                            customize,\n                            fixed,\n                        )}\n                        color=\"primary\"\n                    >\n                        Salvar\n                    </CButton>\n                </CModalFooter>\n            </CModal>\n        </>\n    )\n}\n\nexport default  BtnEditPlan;\n","import React, { useState } from 'react';\nimport { CCol, CForm, CFormInput, CFormLabel, CFormSelect, CRow } from '@coreui/react';\n\nimport '../../css/activeAndInactive.css';\nimport BtnEditPlan from '../btn/BtnEditPlan';\n\nfunction ActiveAndInactivePlan() {\n    const [op1, setOp1] = useState(true);\n    const [op2, setOp2] = useState(false);\n\n    const choiceActive = () => {\n        setOp1(true), setOp2(false)\n    };\n    const choiceInactive = () => {\n        setOp1(false), setOp2(true)\n    };\n\n    return (\n        <>\n            <CRow>\n                <CCol\n                    className={\n                        op1 === true\n                            ? \"nav-plan-active-active\"\n                            : \"nav-plan-active\"\n                    }\n                    onClick={choiceActive}\n                >\n                    <label>Plano ativo</label>\n                </CCol>\n                <CCol\n                    className={\n                        op2 === true\n                            ? \"nav-plan-inactive-active\"\n                            : \"nav-plan-inactive\"\n                    }\n                    onClick={choiceInactive}\n                >\n                    <label>Plano inativo</label>\n                </CCol>\n                <CCol></CCol>\n                <CCol></CCol>\n            </CRow>\n            <br />\n            {op1 === true ? (\n                <>\n                    <CRow className=\"my-4\">\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"name-plan\"\n                                >\n                                    Nome do plano\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"name-plan\"\n                                    type=\"text\"\n                                    placeholder=\"Plano principal\"\n                                    readOnly\n                                />\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"value-km-plan\"\n                                >\n                                    Valor do km (R$)\n                                </CFormLabel>\n                                <CFormInput\n                                    id=\"value-km-plan\"\n                                    label=\"Valor do km (R$)\"\n                                    type=\"text\" placeholder=\"R$ 0,06\"\n                                    readOnly\n                                />\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <CRow className=\"my-4\">\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"toppings-included-plan\"\n                                >\n                                    Coberturas inclusas no plano\n                                </CFormLabel>\n                                <CFormSelect\n                                    id=\"toppings-included-plan\"\n                                    size=\"lg\"\n                                    className=\"form-select\"\n                                    multiple\n                                    disabled\n                                >\n                                    <option value=\"1\">Roubo e furto</option>\n                                    <option value=\"2\">Assistência 24h</option>\n                                    <option value=\"3\">Incêndio</option>\n                                    <option value=\"4\">Alagamentos</option>\n                                    <option value=\"5\">Reboque</option>\n                                    <option value=\"6\">Colisão de perda total</option>\n                                </CFormSelect>\n                            </CForm>\n                        </CCol>\n                        <CCol>\n                            <CForm>\n                                <CFormLabel\n                                    htmlFor=\"customizable-coverage-plan\"\n                                >\n                                    Coberturas customizáveis no plano\n                                </CFormLabel>\n                                <CFormSelect\n                                    id=\"customizable-coverage-plan\"\n                                    size=\"lg\"\n                                    multiple\n                                    disabled\n                                >\n                                    <option value=\"1\"> Colisão de danos parciais</option>\n                                    <option value=\"2\">Proteção de danos materiais</option>\n                                    <option value=\"3\">Cobertura de vidros</option>\n                                    <option value=\"4\">Chaveiro</option>\n                                </CFormSelect>\n                            </CForm>\n                        </CCol>\n                    </CRow>\n                    <BtnEditPlan />\n                </>\n            ) : null}\n\n            {/* {op2 === true ? () : null}*/}\n        </>\n    )\n}\n\nexport default  ActiveAndInactivePlan","import React from 'react';\nimport { CCard, CCardBody, CCol, CRow } from '@coreui/react';\n\nimport ImputSearch from './imput/ImputSearch';\nimport ActiveAndInactivePlan from './components/ActiveAndInactivePlan';\n\nfunction AddPlans() {\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"plan-title\">Planos</label >\n                    </CCol>\n                    <CCol className=''>\n                        <ImputSearch />\n                    </CCol>\n                </CRow>\n                <br />\n                <CRow>\n                    <CCol>\n                        <ActiveAndInactivePlan />\n                    </CCol>\n                </CRow>\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  AddPlans","import React from 'react';\nimport { CCol, CRow } from '@coreui/react';\n\nimport GraphicPlan from './render/GraphicPlan';\nimport Scratchs from './render/Scratchs';\nimport AddPlans from './render/AddPlans';\n\nconst Plans = () => {\n    return (\n        <>\n            <CRow>\n                <CCol xs={4}>\n                    <GraphicPlan />\n                </CCol>\n                <CCol xs={8}>\n                    <Scratchs />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol>\n                    <AddPlans />\n                </CCol>\n            </CRow>\n        </>\n    )\n}\n\nexport default  Plans;\n"],"sourceRoot":""}