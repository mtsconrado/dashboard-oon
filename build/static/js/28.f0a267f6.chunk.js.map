{"version":3,"sources":["views/calls/btns/ButtonCall.jsx","views/calls/render/Calls.jsx","views/calls/render/CallsQTD.jsx","views/calls/render/CallsBranch.jsx","views/calls/render/Channel.jsx","views/calls/render/CallsPerformance.jsx","views/calls/render/CalendarAtts.jsx","views/calls/Call.jsx"],"names":["ButtonOp","caret","variant","color","className","icon","cilOptions","size","Calls","random","min","max","Math","floor","type","data","labels","datasets","label","backgroundColor","borderColor","pointBorderColor","options","maintainAspectRatio","plugins","legend","position","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","line","point","radius","hitRadius","hoverRadius","hoverBorderWidth","CallsQTD","CallsBranch","barPercentage","Channel","CallsPerformance","busca","useState","protocolo","status","funcionario","cliente","atendimentos","dados","setDados","busca2","setBusca","dados2","BuscaUser","auxBusca","toLocaleLowerCase","map","item","auxStatus","auxFunc","includes","push","href","onChange","e","target","value","placeholder","cilMagnifyingGlass","striped","hover","scope","index","toString","CalendarAtts","Date","hora","atualizacoes","Call","xs"],"mappings":"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","file":"static/js/28.f0a267f6.chunk.js","sourcesContent":["import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport { cilOptions } from '@coreui/icons'\n\n// importando buttons \nimport BtnEditPlan from './bottonsOp/EditPlan'\nimport BtnConfig from './bottonsOp/Config'\nimport BtnGenerateChart from './bottonsOp/GenerateChart'\nimport BtnGenerateReport from './bottonsOp/GenerateReport'\n\nimport {\n    CButton,\n    CDropdown,\n    CDropdownItem,\n    CDropdownMenu,\n    CDropdownToggle,\n    CPopover,\n} from '@coreui/react'\n\nconst ButtonOp = () => {\n    // Buttom de relatorio dos cards\n    // pegar pelo PROPS, os dados do card selecionado\n    // basear esse button no que o card enviar \n\n    return (\n        <CDropdown>\n            <CDropdownToggle caret={false} variant='ghost' color=\"link\" className=\"p-0\">\n                <CIcon icon={cilOptions} size=\"lg\" />\n            </CDropdownToggle>\n            <CDropdownMenu>\n                <CDropdownItem>Alterar mês</CDropdownItem>\n                <CDropdownItem>Gerar relatório</CDropdownItem>\n                <CDropdownItem>Editar gráfico...</CDropdownItem>\n                <CDropdownItem>Mais Ferramentas</CDropdownItem>\n            </CDropdownMenu>\n        </CDropdown>\n    )\n}\n\nexport default  ButtonOp;","import React from 'react';\nimport { CChart } from '@coreui/react-chartjs';\nimport { CCol, CCard, CCardBody, CRow } from '@coreui/react';\n\nimport ButtonRelatory from '../btns/ButtonCall'\n\nconst Calls = () => {\n    const random = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"call-title\">Comparativo</label >\n                        <br />\n                        <label className=\"call-sub\">Dezembro 2022</label>\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <ButtonRelatory />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"line\"\n                    data={{\n                        labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 5'],\n                        datasets: [\n                            {\n                                label: 'Atendimentos abertos',\n                                backgroundColor: '#5F7ADA',\n                                borderColor: \"#5F7ADA\",\n                                pointBorderColor: \"#fff\",\n                                data: [\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n                            {\n                                label: 'Atendimentos encerrados',\n                                backgroundColor: '#99E9F4',\n                                borderColor: \"#99E9F4\",\n                                pointBorderColor: \"#fff\",\n                                data: [\n                                    random(50, 250),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                    random(50, 200),\n                                ],\n                            },\n\n                        ],\n                    }}\n                    options={{\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                display: true,\n                            },\n                        },\n                        scales: {\n                            x: {\n                                grid: {\n                                    drawOnChartArea: false,\n                                },\n                            },\n                            y: {\n                                ticks: {\n                                    beginAtZero: true,\n                                    maxTicksLimit: 5,\n                                    stepSize: Math.ceil(250 / 5),\n                                    max: 250,\n                                },\n                            },\n                        },\n                        elements: {\n                            line: {\n                                // tension: 0.2,\n                            },\n                            point: {\n                                radius: 0,\n                                hitRadius: 10,\n                                hoverRadius: 4,\n                                hoverBorderWidth: 3,\n                            },\n                        },\n                    }}\n                    className=\"chart-line\"\n                />\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  Calls;\n","import React from 'react';\nimport { CCol, CCard, CCallout, CRow } from '@coreui/react';\n\nimport ButtonRelatory from '../btns/ButtonCall';\n\nconst CallsQTD = () => {\n    return (\n        <>\n            <CCard className='card-atend'>\n                <CCallout className=\"callout\" color=\"primary\">\n                    <CRow>\n                        <div className=\"btn-filter\">\n                            <ButtonRelatory />\n                        </div>\n                        <CCol className='text-center'>\n                            <h2>55</h2>\n                            <label className=\"call-subTitle\">Atendimentos em Aberto</label>\n                        </CCol>\n                    </CRow>\n                </CCallout>\n            </CCard>\n            <br />\n            <CCard className='text-center card-atend'>\n                <CCallout className=\"callout\" color=\"info\">\n                    <CRow>\n                        <div className=\"btn-filter\">\n                            <ButtonRelatory />\n                        </div>\n                        <CCol className='text-center'>\n                            <h2>25</h2>\n                            <label className=\"call-subTitle\">Atendimentos encerrados na última hora</label>\n                        </CCol>\n                    </CRow>\n                </CCallout>\n            </CCard>\n        </>\n    )\n}\n\nexport default  CallsQTD;\n","import React from 'react';\nimport { CChart } from '@coreui/react-chartjs';\nimport { CCol, CCard, CCardBody, CRow } from '@coreui/react';\n\nimport ButtonRelatory from '../btns/ButtonCall';\n\nconst CallsBranch = () => {\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"call-title\">Comparativo</label >\n                        <br />\n                        <label className=\"call-sub\">Dezembro 2022</label>\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <ButtonRelatory />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"bar\"\n                    options={{\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                            },\n                        }\n                    }}\n                    data={{\n                        labels: ['WhatsApp', 'E-mail', 'Chat', 'Instagram', 'Outro'],\n                        datasets: [\n                            {\n                                label: 'Chamadas de clientes',\n                                backgroundColor: '#5F7ADA',\n                                barPercentage: 0.7,\n                                data: [40, 20, 12, 39, 10, 80],\n                            },\n                            {\n                                label: 'Chamadas de não clientes',\n                                backgroundColor: '#99E9F4',\n                                barPercentage: 0.7,\n                                data: [10, 45, 22, 19, 30, 40],\n                            },\n                        ],\n                    }}\n                    labels=\"months\"\n                />\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  CallsBranch;\n","import React from 'react';\nimport { CChart } from '@coreui/react-chartjs';\nimport { CCol, CCard, CCardBody, CRow } from '@coreui/react';\n\nimport ButtonRelatory from '../btns/ButtonCall';\n\nconst Channel = () => {\n    return (\n        <CCard className='card'>\n            <CCardBody>\n                <CRow>\n                    <CCol>\n                        <label className=\"call-title\">Comparativo</label >\n                        <br />\n                        <label className=\"call-sub\">Dezembro 2022</label>\n                    </CCol>\n                    <CCol className='btn-filter'>\n                        <ButtonRelatory />\n                    </CCol>\n                </CRow>\n                <CChart\n                    type=\"doughnut\"\n                    options={{\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                            },\n                        }\n                    }}\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: ['#EB9B00', '#E7E6E6', '#B836F5', '#96BAF1', '#C9F196'],\n                                data: [40, 20, 80, 10, 5],\n                            },\n                        ],\n                        labels: ['Chat do aplicativo', 'E-mail', 'Instagram', 'Whatsapp', 'Outro'],\n                    }}\n                />\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  Channel;\n","import React, { useState } from 'react';\nimport {\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableRow,\n    CCard,\n    CCardBody,\n    CTableHead,\n    CTableHeaderCell,\n    CNavbar,\n    CForm,\n    CFormInput,\n    CButton,\n    CNavbarBrand,\n} from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport { cilMagnifyingGlass } from '@coreui/icons';\n\n\nconst CallsPerformance = () => {\n    const [atendimentos, setAtendimentos] = useState(\n        [\n            { protocolo: 123456, data: \"12/12/2012\", status: 'Encerrado', funcionario: 'Paulo Jorge', cliente: 'sim ' },\n            { protocolo: 454654, data: \"22/02/2022\", status: 'Em Aberto', funcionario: 'Paula Leticia', cliente: 'Não ' },\n            { protocolo: 4798947, data: \"28/10/2022\", status: 'Em Aberto', funcionario: 'Afranio Alcantara', cliente: 'Não ' },\n        ]\n    )\n    const [dados, setDados] = useState(atendimentos)\n    const [busca2, setBusca] = useState('')\n\n    const dados2 = []\n    let busca\n\n    const pegandoBusca = (e) => {\n        setBusca(e.target.value)\n        busca = e.target.value\n        BuscaUser()\n    }\n\n    const BuscaUser = () => {\n        let auxBusca = busca.toLocaleLowerCase()\n        atendimentos.map(item => {\n            let auxStatus = item.status.toLocaleLowerCase()     // ALTERAR AQUI DE ACORDO COM OS CAMPOS DA API\n            let auxFunc = item.funcionario.toLocaleLowerCase()   // ALTERAR AQUI DE ACORDO COM OS CAMPOS DA API\n            if ((auxStatus.includes(auxBusca) || (auxFunc.includes(auxBusca)))) {\n                dados2.push(item)\n                setDados(dados2)\n            }\n        })\n    }\n\n    return (\n        <CCard className=\"card-protocolo\">\n            <CCardBody>\n                <CNavbar>\n                    <CNavbarBrand href=\"#\"></CNavbarBrand>\n                    <CForm className=\"d-flex\">\n                        <CFormInput type=\"search\" className=\"me-2\" onChange={pegandoBusca} value={busca2} placeholder=\"Pesquisar\" />\n                        <CButton type=\"button\" color='secondary' >\n                            <CIcon icon={cilMagnifyingGlass} size=\"lg\" />\n                        </CButton>\n                    </CForm>\n                </CNavbar>\n                <CTable striped hover>\n                    <CTableHead>\n                        <CTableRow>\n                            <CTableHeaderCell scope=\"col\">Protocolo</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Data</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Funcionário</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Cliente</CTableHeaderCell>\n                        </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                        {dados.map((item, index) => (\n                            <CTableRow key={index.toString()}>\n                                <CTableDataCell>\n                                    {item.protocolo}\n                                </CTableDataCell>\n\n                                <CTableDataCell>\n                                    {item.data}\n                                </CTableDataCell>\n\n                                <CTableDataCell>\n                                    {item.status}\n                                </CTableDataCell>\n\n                                <CTableDataCell>\n                                    {item.funcionario}\n                                </CTableDataCell>\n\n                                <CTableDataCell>\n                                    {item.cliente}\n                                </CTableDataCell>\n                            </CTableRow>\n                        ))}\n                    </CTableBody>\n                </CTable>\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  CallsPerformance;\n","import React, { useState } from 'react';\nimport Calendar from \"react-calendar\";\nimport { CTable, CTableBody, CTableDataCell, CTableRow, CCard, CCardBody } from '@coreui/react';\n\nimport 'react-calendar/dist/Calendar.css';\n\nconst CalendarAtts = () => {\n    const [value, onChange] = useState(new Date())\n\n    const [pessoas, setPessoas] = useState(22) // caso fizer alguma requisicao, utilizar aqui até carregar\n\n    const [atualizacoes, setAtualizacoes] = useState(\n        [\n            { protocolo: '23232', status: 'Aberto', data: '12/01/2022', hora: '12:20' },\n            { protocolo: '23562', status: 'Encerrado', data: '12/01/2022', hora: '12:30' },\n            { protocolo: '89032', status: 'Aberto', data: '12/01/2022', hora: '12:50' }\n        ]\n    )\n\n    return (\n        <CCard className='card-calender'>\n            <CCardBody>\n                <Calendar\n                    onChange={onChange}\n                    value={value}\n                    className='calender'\n                />\n                <hr />\n                <label>\n                    Atualizações\n                </label>\n                <CTable>\n                    <CTableBody>\n                        {atualizacoes.map((item, index) => (\n                            <CTableRow key={index.toString()}>\n                                <CTableDataCell>\n                                    {item.protocolo}\n                                </CTableDataCell>\n\n                                <CTableDataCell>\n                                    {item.status}\n                                </CTableDataCell>\n\n                                <CTableDataCell className=\"px-0\">\n                                    {`${item.data} às ${item.hora}`}\n                                </CTableDataCell>\n\n                            </CTableRow>\n                        ))}\n                    </CTableBody>\n                </CTable>\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default  CalendarAtts;\n","import React from 'react'\nimport { CCol, CRow } from '@coreui/react';\n\nimport Calls from './render/Calls'\nimport CallsQTD from './render/CallsQTD'\nimport CallsBranch from './render/CallsBranch'\nimport Channel from './render/Channel'\nimport CallsPerformance from './render/CallsPerformance'\nimport CalendarAtts from './render/CalendarAtts'\n\nimport './css/call.css'\n\nconst Call = () => {\n    return (\n        <>\n            <CRow>\n                <CCol xs={8}>\n                    <Calls />\n                </CCol>\n                <CCol xs={4}>\n                    <CallsQTD />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol xs={8}>\n                    <CallsBranch />\n                </CCol>\n                <CCol xs={4}>\n                    <Channel />\n                </CCol>\n            </CRow>\n            <br />\n            <CRow>\n                <CCol xs={8}>\n                    <CallsPerformance />\n                </CCol>\n                <CCol xs={4}>\n                    <CalendarAtts />\n                </CCol>\n            </CRow>\n        </>\n    )\n}\n\nexport default  Call;\n"],"sourceRoot":""}